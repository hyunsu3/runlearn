words = [
  { word: "pursuit", meaning: "Ï∂îÍµ¨, Ï¢áÏùå" },
  { word: "associated with", meaning: "~ÏôÄ Í¥ÄÎ†®Ïù¥ ÏûàÎäî" },
  { word: "whether A or B", meaning: "A ÎòêÎäî B" },
  { word: "objective", meaning: "Î™©Ìëú" },
  { word: "reality", meaning: "ÌòÑÏã§" },
  { word: "temporary", meaning: "ÏùºÏãúÏ†ÅÏù∏" },
  { word: "clarity", meaning: "Î™ÖÎ£åÏÑ±" },
  { word: "assess", meaning: "ÌèâÍ∞ÄÌïòÎã§" },
  { word: "hinder", meaning: "Î∞©Ìï¥ÌïòÎã§" },
  { word: "further", meaning: "Îçî Î©ÄÎ¶¨ ÎÇòÏïÑÍ∞Ä" },
  { word: "outcome", meaning: "Í≤∞Í≥º" },
  { word: "involve", meaning: "~ÏùÑ Ìè¨Ìï®ÌïòÎã§" },
  { word: "abstract", meaning: "Ï∂îÏÉÅÏ†ÅÏù∏" },
  { word: "factor", meaning: "ÏöîÏù∏" },
  { word: "enhance", meaning: "Ìñ•ÏÉÅÏãúÌÇ§Îã§" },
  { word: "attribute A to B", meaning: "AÏùò ÏõêÏù∏ÏùÑ BÏóêÍ≤å ÎèåÎ¶¨Îã§" },
  { word: "era", meaning: "ÏãúÎåÄ" },
  { word: "novel", meaning: "ÏÉàÎ°úÏö¥" },
  { word: "competent", meaning: "Îä•ÏàôÌïú" },
  { word: "opportunity", meaning: "Í∏∞Ìöå" },
  { word: "cultivate", meaning: "Í≤ΩÏûëÌïòÎã§" },
  { word: "in order to", meaning: "~ÌïòÍ∏∞ ÏúÑÌï¥ÏÑú" },
  { word: "keep you from ing", meaning: "ÎãπÏã†Ïù¥ ~ÌïòÎäî Í≤ÉÏùÑ ÎßâÎã§" },
  { word: "appropriate", meaning: "Ï†ÅÏ†àÌïú" },
];

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

let currentWordObj = null; // üîπ ÌòÑÏû¨ Ï∂úÏ†úÎêú Îã®Ïñ¥ Ï†ÄÏû• Î≥ÄÏàò
let lastWordObj = null; // üîπ Î∞îÎ°ú ÏßÅÏ†Ñ Î¨∏Ï†ú Î∞©ÏßÄ Î≥ÄÏàò
let wordScores = {}; // üîπ Îã®Ïñ¥Î≥Ñ Ï†êÏàò Ï†ÄÏû•
const PASS_THRESHOLD = 1; // üîπ Ìå®Ïä§ Í∏∞Ï§Ä Í∞ÄÏÇ∞Ï†ê

function startGame() {
  console.log("=== Í≤åÏûÑ ÏãúÏûë ===");
  console.log(
    "Ï†ÑÏ≤¥ Îã®Ïñ¥ Î∞∞Ïó¥ (words):",
    words.map((w) => w.word)
  );
  console.log("ÌòÑÏû¨ wordScores ÏÉÅÌÉú:", wordScores);
  console.log("PASS_THRESHOLD:", PASS_THRESHOLD);

  // üîπ Î™®Îì† Îã®Ïñ¥Í∞Ä Ìå®Ïä§ Í∏∞Ï§ÄÏùÑ ÎÑòÏúºÎ©¥ Ï¢ÖÎ£å (Í≥µÎ∞± Ï†úÍ±∞ ÌõÑ Í∞ÄÏÇ∞Ï†ê Ï°∞Ìöå)
  let remainingWords = words.filter((w) => {
    let cleanWord = w.word.trim().replace(/\s/g, ""); // Í≥µÎ∞± Ï†úÍ±∞
    let score = wordScores[cleanWord] || 0;
    console.log(`Îã®Ïñ¥: ${w.word} (Ï†ïÎ¶¨Îêú: ${cleanWord}), Ï†êÏàò: ${score}, Ìå®Ïä§ Í∏∞Ï§Ä(${PASS_THRESHOLD}) ÎπÑÍµê: ${score < PASS_THRESHOLD}`);
    return score < PASS_THRESHOLD;
  });

  console.log(
    "ÌïÑÌÑ∞ÎßÅÎêú remainingWords:",
    remainingWords.map((w) => w.word)
  );

  if (remainingWords.length === 0) {
    alert("Î™®Îì† Î¨∏Ï†úÎ•º Ïûò ÌíÄÏóàÏñ¥Ïöî! Ï∂ïÌïòÌï©ÎãàÎã§! üéâ");
    return;
  }

  // üîπ Î∞îÎ°ú ÏßÅÏ†Ñ Î¨∏Ï†úÏôÄ Îã§Î•∏ Îã®Ïñ¥ ÏÑ†ÌÉù
  let availableWords = remainingWords.filter((w) => w !== lastWordObj);
  console.log(
    "ÌïÑÌÑ∞ÎßÅÎêú availableWords (ÏßÅÏ†Ñ Îã®Ïñ¥ Ï†úÏô∏):",
    availableWords.map((w) => w.word)
  );

  // üîπ ÎÇ®ÏùÄ Îã®Ïñ¥Í∞Ä ÌïòÎÇòÎøêÏù¥ÎùºÎ©¥ Í∑∏ Îã®Ïñ¥ÎùºÎèÑ Ï∂úÏ†ú
  if (availableWords.length === 0) {
    if (remainingWords.length === 1) {
      availableWords = remainingWords;
      console.log("‚ö†Ô∏è ÎÇ®ÏùÄ Îã®Ïñ¥Í∞Ä ÌïòÎÇòÎøêÏù¥ÎØÄÎ°ú Ìï¥Îãπ Îã®Ïñ¥ ÏÑ†ÌÉù:", availableWords[0].word);
    } else {
      availableWords = remainingWords.filter((w) => w !== lastWordObj);
    }
  }

  // üîπ ÏÑ†ÌÉùÎêú Îã®Ïñ¥ Ï∂úÎ†• (Í≥µÎ∞± Ï†úÍ±∞ ÌõÑ Ï†êÏàò ÌôïÏù∏)
  currentWordObj = availableWords[Math.floor(Math.random() * availableWords.length)];
  lastWordObj = currentWordObj;

  let cleanSelectedWord = currentWordObj.word.trim().replace(/\s/g, "");
  console.log(`‚úÖ ÏÑ†ÌÉùÎêú Îã®Ïñ¥: ${currentWordObj.word}, ÌòÑÏû¨ Ï†êÏàò: ${wordScores[cleanSelectedWord] || 0}`);

  let word = currentWordObj.word;
  let meaning = currentWordObj.meaning;

  document.querySelector(".word-meaning").textContent = `Îúª: ${meaning}`;
  document.querySelector(".slots").innerHTML = "";
  document.querySelector(".stickers").innerHTML = "";

  let letters = word.split("");
  let revealedLetters = new Map();

  letters.forEach((letter, index) => {
    let slot = document.createElement("div");
    slot.classList.add("slot");

    if (letter === " ") {
      slot.classList.add("empty");
      slot.textContent = "";
    } else if (Math.random() < 0.4) {
      slot.textContent = letter;
      slot.style.color = "black";
      revealedLetters.set(index, letter);
    } else {
      slot.dataset.index = index;
    }
    document.querySelector(".slots").appendChild(slot);
  });

  let filteredLetters = letters.filter((_, index) => !revealedLetters.has(index) && letters[index] !== " ");
  let shuffledLetters = shuffle(filteredLetters.filter((letter) => letter !== " "));

  let stickerContainer = document.querySelector(".stickers");
  stickerContainer.style.position = "relative";
  stickerContainer.style.height = "120px";
  stickerContainer.style.width = "100%";

  let stickerCount = shuffledLetters.length;
  let maxPerRow = stickerContainer.clientWidth >= 450 ? 8 : 6;
  let rowCount = Math.ceil(stickerCount / maxPerRow);

  let stickerSize = 40;
  let gap = 10;
  let rowHeight = stickerSize + gap;

  stickerContainer.style.height = `${rowCount * rowHeight}px`;

  shuffledLetters.forEach((letter, index) => {
    let sticker = document.createElement("div");
    sticker.classList.add("sticker");
    sticker.textContent = letter;
    sticker.style.position = "absolute";

    let row = Math.floor(index / maxPerRow);
    let col = index % maxPerRow;
    let totalInRow = Math.min(stickerCount - row * maxPerRow, maxPerRow);
    let rowWidth = totalInRow * (stickerSize + gap) - gap;
    let startX = (stickerContainer.clientWidth - rowWidth) / 2;

    let x = startX + col * (stickerSize + gap);
    let y = row * rowHeight;

    sticker.style.left = `${x}px`;
    sticker.style.top = `${y}px`;

    sticker.onclick = function () {
      let emptySlot = document.querySelector(".slot[data-index]");
      if (emptySlot) {
        emptySlot.textContent = letter;
        emptySlot.style.color = "#aaa";
        emptySlot.removeAttribute("data-index");
        sticker.remove();

        if (!document.querySelector(".slot[data-index]")) {
          checkAnswer();
        }
      }
    };

    stickerContainer.appendChild(sticker);
  });
}

function checkAnswer() {
  let slots = Array.from(document.querySelectorAll(".slot"));

  if (slots.filter((slot) => !slot.classList.contains("empty")).some((slot) => slot.textContent === "")) return;

  let answer = slots
    .map((s) => s.textContent)
    .join(" ")
    .replace(/ /g, "");
  let correctAnswer = currentWordObj.word.replace(/ /g, "");

  console.log("ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûÖÎ†•Ìïú Îã®Ïñ¥:", `"${answer}"`);
  console.log("Ï†ïÎãµ Îã®Ïñ¥:", `"${correctAnswer}"`);

  let cleanWord = currentWordObj.word.trim().replace(/\s/g, "");

  if (answer === correctAnswer) {
    slots.forEach((slot) => {
      slot.style.color = "black";
      slot.style.border = "none";
    });

    wordScores[cleanWord] = (wordScores[cleanWord] || 0) + 1;
    console.log(`‚úÖ Ï†ïÎãµ! ÌòÑÏû¨ Ï†êÏàò: ${wordScores[cleanWord]}`);

    const audioEngFile = `Audio/${currentWordObj.word.replace(/ /g, "_")}.mp3`;
    const audioKorFile = `Audio/${currentWordObj.word.replace(/ /g, "_")}_kor.mp3`;

    let audioEng = new Audio(audioEngFile);
    let audioKor = new Audio(audioKorFile);

    audioEng.play();
    audioEng.onended = () => {
      audioKor.play();
      audioKor.onended = () => {
        // Î™®Îì† Îã®Ïñ¥Í∞Ä ÌÜµÍ≥ºÌñàÎäîÏßÄ ÌôïÏù∏
        const allPassed = words.every((w) => {
          const clean = w.word.trim().replace(/\s/g, "");
          return (wordScores[clean] || 0) >= PASS_THRESHOLD;
        });

        if (allPassed) {
          const goodJobAudio = new Audio("Audio/goodjob.mp3");
          goodJobAudio.play();

          // üéâ Î¨¥ÏßÄÍ∞ú ÏΩòÌéòÌã∞ Ìö®Í≥º
          const end = Date.now() + 5 * 1000;
          const colors = ["#ff0000", "#ffff00", "#0000ff", "#00ff00", "#8000ff", "#ff8000"];

          (function frame() {
            confetti({
              particleCount: 3,
              angle: 60,
              spread: 55,
              origin: { x: 0 },
              colors: colors,
            });
            confetti({
              particleCount: 3,
              angle: 120,
              spread: 55,
              origin: { x: 1 },
              colors: colors,
            });
            if (Date.now() < end) {
              requestAnimationFrame(frame);
            }
          })();
        } else {
          setTimeout(startGame, 500);
        }
      };
    };
  } else {
    wordScores[cleanWord] = (wordScores[cleanWord] || 0) - 1;
    console.log(`‚ùå Ïò§Îãµ! ÌòÑÏû¨ Ï†êÏàò: ${wordScores[cleanWord]}`);

    let correctWordArray = currentWordObj.word.replace(/ /g, "").split("");
    let userWordArray = slots
      .map((s) => s.textContent)
      .join("")
      .replace(/ /g, "")
      .split("");

    let incorrectLetters = [];
    let userIndex = 0;
    slots.forEach((slot) => {
      if (!slot.classList.contains("empty")) {
        if (userWordArray[userIndex] !== correctWordArray[userIndex]) {
          slot.style.color = "red";
          incorrectLetters.push(slot.textContent.trim());
        } else {
          slot.style.color = "black";
        }
        userIndex++;
      }
    });

    setTimeout(() => {
      document.querySelector(".stickers").innerHTML = "";

      userIndex = 0;
      slots.forEach((slot) => {
        if (!slot.classList.contains("empty")) {
          if (userWordArray[userIndex] !== correctWordArray[userIndex]) {
            slot.textContent = "";
            slot.dataset.index = "";
            slot.style.color = "#aaa";
          }
          userIndex++;
        }
      });

      incorrectLetters.forEach((letter) => {
        let sticker = document.createElement("div");
        sticker.classList.add("sticker");
        sticker.textContent = letter;
        sticker.onclick = function () {
          let emptySlot = document.querySelector(".slot[data-index]");
          if (emptySlot) {
            emptySlot.textContent = letter;
            emptySlot.style.color = "#aaa";
            emptySlot.removeAttribute("data-index");
            sticker.remove();
            if (!document.querySelector(".slot[data-index]")) {
              checkAnswer();
            }
          }
        };
        document.querySelector(".stickers").appendChild(sticker);
      });
    }, 1000);
  }
}

startGame();

document.onkeydown = (e) => {
  const key = e.key.toLowerCase();

  // ÏïåÌååÎ≤≥Îßå ÌóàÏö© (shiftÎÇò ctrl Îì±ÏùÄ Î¨¥Ïãú)
  if (!/^[a-z]$/.test(key)) return;

  // ÌôîÎ©¥Ïóê ÎÇ®ÏïÑÏûàÎäî Ïä§Ìã∞Ïª§ Ï§ë keyÏóê Ìï¥ÎãπÌïòÎäî Í≤É Ï∞æÍ∏∞
  const stickers = Array.from(document.querySelectorAll(".sticker"));
  const targetSticker = stickers.find((sticker) => sticker.textContent.toLowerCase() === key);

  if (targetSticker) {
    targetSticker.click(); // Ïä§Ìã∞Ïª§ ÌÅ¥Î¶≠ Ìö®Í≥º Î∞úÏÉù
  }
};
